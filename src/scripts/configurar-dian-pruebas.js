import ConfiguracionDian from '../models/ConfiguracionDian.js';
import sequelize from '../config/database.js';

/**
 * Script para configurar autom√°ticamente el ambiente de pruebas DIAN
 * Utiliza los datos oficiales de testing de la DIAN
 */
async function configurarDianPruebas() {
  try {
    console.log('üöÄ Iniciando configuraci√≥n de ambiente de pruebas DIAN...');

    // Verificar conexi√≥n a la base de datos
    await sequelize.authenticate();
    console.log('‚úÖ Conexi√≥n a base de datos establecida');

    // Sincronizar modelos (crear tablas si no existen)
    await sequelize.sync();
    console.log('‚úÖ Tablas sincronizadas');

    // Verificar si ya existe configuraci√≥n
    const configuracionExistente = await ConfiguracionDian.findOne({
      where: { activo: true }
    });

    if (configuracionExistente) {
      console.log('‚ö†Ô∏è  Ya existe una configuraci√≥n DIAN activa');
      console.log('Configuraci√≥n actual:', {
        nit: configuracionExistente.nit_empresa,
        ambiente: configuracionExistente.ambiente,
        numero_actual: configuracionExistente.numero_actual
      });
      
      const respuesta = await preguntarContinuar('¬øDesea reemplazarla? (s/n): ');
      if (respuesta.toLowerCase() !== 's') {
        console.log('‚ùå Operaci√≥n cancelada');
        return;
      }

      // Desactivar configuraci√≥n existente
      await configuracionExistente.update({ activo: false });
      console.log('üîÑ Configuraci√≥n anterior desactivada');
    }

    // Datos oficiales de pruebas de la DIAN
    const configuracionPruebas = {
      ambiente: 'HABILITACION',
      nit_empresa: '900373115', // NIT de pruebas oficial DIAN
      razon_social: 'EMPRESA DE PRUEBAS FACTURACI√ìN ELECTR√ìNICA',
      resolucion_dian: '18760000001', // Resoluci√≥n de pruebas
      fecha_resolucion: new Date('2019-01-19'),
      prefijo_factura: 'SETP', // Set de pruebas
      rango_inicial: 1,
      rango_final: 5000, // Rango amplio para pruebas
      numero_actual: 0,
      url_api_envio: 'https://vpfe-hab.dian.gov.co/WcfDianCustomerServices.svc',
      url_api_consulta: 'https://vpfe-hab.dian.gov.co/WcfDianCustomerServices.svc',
      certificado_path: null, // Se configurar√° despu√©s
      certificado_password: null,
      activo: true
    };

    // Crear nueva configuraci√≥n
    const nuevaConfiguracion = await ConfiguracionDian.create(configuracionPruebas);
    
    console.log('‚úÖ Configuraci√≥n de pruebas DIAN creada exitosamente');
    console.log('üìã Detalles de configuraci√≥n:');
    console.log('   - Ambiente:', nuevaConfiguracion.ambiente);
    console.log('   - NIT Empresa:', nuevaConfiguracion.nit_empresa);
    console.log('   - Raz√≥n Social:', nuevaConfiguracion.razon_social);
    console.log('   - Resoluci√≥n:', nuevaConfiguracion.resolucion_dian);
    console.log('   - Prefijo:', nuevaConfiguracion.prefijo_factura);
    console.log('   - Rango:', `${nuevaConfiguracion.rango_inicial} - ${nuevaConfiguracion.rango_final}`);
    console.log('   - URL Env√≠o:', nuevaConfiguracion.url_api_envio);
    console.log('   - URL Consulta:', nuevaConfiguracion.url_api_consulta);

    console.log('\nüéâ ¬°Configuraci√≥n completada!');
    console.log('\nüìå IMPORTANTE:');
    console.log('   - Esta configuraci√≥n usa datos oficiales de pruebas de la DIAN');
    console.log('   - Para producci√≥n deber√° actualizar con sus datos reales');
    console.log('   - Los certificados digitales se configuran por separado');
    console.log('   - El ambiente actual es HABILITACION (pruebas)');

    console.log('\nüöÄ Pr√≥ximos pasos:');
    console.log('   1. Probar la generaci√≥n de XML con una factura');
    console.log('   2. Configurar certificados digitales para firma');
    console.log('   3. Realizar pruebas de env√≠o a la DIAN');
    console.log('   4. Pasar a producci√≥n cuando est√© listo');

  } catch (error) {
    console.error('‚ùå Error configurando DIAN:', error);
    throw error;
  }
}

/**
 * Funci√≥n auxiliar para preguntar al usuario
 */
function preguntarContinuar(pregunta) {
  return new Promise((resolve) => {
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    rl.question(pregunta, (respuesta) => {
      rl.close();
      resolve(respuesta);
    });
  });
}

/**
 * Ejecutar script si se llama directamente
 */
if (import.meta.url === `file://${process.argv[1]}`) {
  configurarDianPruebas()
    .then(() => {
      console.log('\n‚úÖ Script ejecutado exitosamente');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Error ejecutando script:', error.message);
      process.exit(1);
    });
}

export default configurarDianPruebas;